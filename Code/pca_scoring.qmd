---
title: "Review Data Cleaning and PCA Modeling"
format: docx
editor: visual
---

## Preliminaries

Import libraries.
```{r, message=FALSE}
library(tidyverse)
```

Import reviewer-review level data.
```{r}
# this is a big data set! This takes a minute or two
# we are subsetting this to speed up initial computations
review <- read_csv("../Data/final_modeling_df.csv") |> slice(1:1000000)
```

## Data Cleaning + Visualization

Check summary statistics.
```{r}
summary(review)
```

Most of the NA values are coming from product attributes.
```{r}
apply(review, 2, function(x) sum(is.na(x)))
```

Filter out rows with missing values for now, we'll deal with this later.
```{r}
review <- review |>
  filter(if_all(everything(), ~!is.na(.)))
```

Visualize feature distributions for some reviewer-level characteristics.
```{r}
review |>
  arrange(user_id)
```

Select user-level variables and pivot to long format.
```{r}
# create data frame with user-level variables and ID
review_user <- review |>
  select(user_id, 
         active_days, 
         review_count,
         review_frequency,
         useful_user,
         funny_user,
         cool_user,
         star_rating_variance,
         account_age_days,
         average_stars)

long_user <- review_user |>
  pivot_longer(names_to="Feature", values_to="Value", -user_id)
```

Visualize feature distributions. Some users have really extreme values for the votes, like 'cool', 'funny', and 'useful'. Review count and frequency are also strongly right-skewed.
```{r fig.width=9, fig.height=7}
long_user |>
  ggplot(aes(x=Value)) +
  geom_density() +
  facet_wrap(~Feature, scales='free')
```

Use a log transformation to help with skewness. Use an offset of one for variables that can have a value of zero.
```{r}
review_user_log <- review_user %>%
  mutate(across(
    .cols = where(is.numeric) & !all_of(c("account_age_days", "average_stars")),
    .fns = log1p
  ))
```

Redefine `long_user`.
```{r}
long_user <- review_user_log |>
  pivot_longer(names_to="Feature", values_to="Value", -user_id)
```

Plot feature distributions again. They are slightly improved, but we will probably need to address this with a more robust method later.
```{r fig.width=9, fig.height=7}
long_user |>
  ggplot(aes(x=Value)) +
  geom_density() +
  facet_wrap(~Feature, scales='free')
```

## PCA

Compute principal components. We center and scale all features to weight them equally.
```{r}
pca <- prcomp(review_user_log[, -1], center=TRUE, scale=TRUE)
```

View PCA results. Three eigenvectors have eigenvalues greater than 1 (rule of thumb) and three components are able to explain 82% of the variance of the data, which is pretty high for only three components.
```{r}
summary(pca)
```

View the first three eigenvectors.

- E1: The only variable with a positive loading is `review_frequency`. Someone who leaves very frequent reviews will have a more positive value for PC1. However, the `review_count` and community indications of review quality, i.e., `useful_user`, `funny_user`, and `cool_user` all have large negative loadings. So, someone with a large number of reviews that have received favorable feedback from the community will have a large negative value for PC1, especially if their review frequency is low. This seems pretty interesting because PC1 on its own may be a decent differentiator of reviewer quality/trust - a bot that leaves a large number of reviews but does so with high frequency will not have a very negative value for PC1 especially if those bot reviews don't receive positive community feedback. Keep in mind that since we scaled the data, the values of the variables are standard deviations, which incorporate information for each user relative to other users, i.e., it's not just about having a high amount of positive community feedback or a high review count, it's about having high amounts relative to the rest of the user population.
```{r}
pca$rotation[, 1:3]
```

Plot the distribution of PC1.
```{r}
as_tibble(pca$x[, 1]) |>
  ggplot(aes(x = value)) +
  geom_density()
```

Transform to 0 to 1 scale.
```{r}
trust_scores <- exp(pca$x[, 1])/(1 + exp(pca$x[, 1]))
```

Plot trust scores.
```{r}
tibble(score = trust_scores) |>
  ggplot(aes(x = score)) +
  geom_density()
```

What do some of the people look like at either end of this distribution?
```{r}
# add trust score variable to user level data
review_user <- review_user |>
  mutate(trust_score = trust_scores)
```

Top 5 trustworthy users.
```{r}
review_user |>
  top_n(trust_score, 5)
```

Top 5 untrustworthy users.
```{r}

```




